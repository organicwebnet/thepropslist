import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity, Share } from 'react-native';
import { PackingContainer } from '../../../shared/services/inventory/packListService';
import { PrintLabelButton } from '../../../shared/components/PropCard/PrintLabelButton';
import { PackingBoxCardBaseProps, PackingBoxState, generateContainerUrl, calculateIsHeavy } from '../../../shared/types/packing';

export const PackingBoxCardMobile: React.FC<PackingBoxCardBaseProps> = ({
  container,
  packListId,
  onUpdateNotes,
  onError,
  baseUrl,
  onPrintLabel,
  onShare,
  onScan
}) => {
  const [state, setState] = useState<PackingBoxState>({
    isLoading: false,
    error: null,
    isSyncing: false
  });

  const handleShare = async () => {
    try {
      await Share.share({
        title: `Box: ${container.name}`,
        message: `View details for box ${container.name}`,
        url: generateContainerUrl(baseUrl, packListId, container.id)
      });
      onShare?.();
    } catch (error) {
      console.error('Error sharing:', error);
      onError?.('Failed to share box details');
    }
  };

  const handleScan = () => {
    onScan?.();
  };

  const label = {
    id: `${packListId}-${container.id}`,
    containerId: container.id,
    packListId,
    qrCode: '', // This will be generated by the service
    containerName: container.name,
    containerStatus: container.status,
    propCount: container.props.length,
    labels: container.labels,
    url: generateContainerUrl(baseUrl, packListId, container.id),
    generatedAt: new Date()
  };

  const isHeavy = calculateIsHeavy(container);

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View>
          <Text style={styles.title}>{container.name}</Text>
          <Text style={styles.subtitle}>Status: {container.status}</Text>
          <Text style={styles.subtitle}>Props: {container.props.length}</Text>
        </View>
        <View style={styles.buttonContainer}>
          <PrintLabelButton
            label={label}
            onError={onError}
            style={styles.button}
          />
          <TouchableOpacity
            onPress={handleShare}
            style={styles.button}
          >
            <Text style={styles.buttonText}>Share</Text>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={handleScan}
            style={styles.button}
          >
            <Text style={styles.buttonText}>Scan</Text>
          </TouchableOpacity>
        </View>
      </View>

      {container.labels.length > 0 && (
        <View style={styles.labelsContainer}>
          {container.labels.map((label) => (
            <View key={label} style={styles.label}>
              <Text style={styles.labelText}>{label}</Text>
            </View>
          ))}
        </View>
      )}

      {container.description && (
        <Text style={styles.description}>{container.description}</Text>
      )}

      <View style={styles.notesContainer}>
        <Text style={styles.notesLabel}>Notes</Text>
        <TextInput
          style={styles.notesInput}
          value={container.description || ''}
          onChangeText={onUpdateNotes}
          placeholder="Add notes about this box..."
          placeholderTextColor="#666"
          multiline
          numberOfLines={3}
        />
      </View>

      {container.dimensions && (
        <Text style={styles.details}>
          Dimensions: {container.dimensions.width} x {container.dimensions.height} x{' '}
          {container.dimensions.depth} {container.dimensions.unit}
        </Text>
      )}

      {container.maxWeight && (
        <Text style={styles.details}>
          Max Weight: {container.maxWeight.value} {container.maxWeight.unit}
        </Text>
      )}

      {container.currentWeight && (
        <View style={styles.weightContainer}>
          <Text style={styles.details}>
            Current Weight: {container.currentWeight.value} {container.currentWeight.unit}
          </Text>
          {isHeavy && (
            <Text style={styles.heavyWarning}>(Heavy)</Text>
          )}
        </View>
      )}

      {state.error && (
        <Text style={styles.error}>{state.error}</Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#1A1A1A',
    borderRadius: 8,
    padding: 16,
    marginVertical: 8,
    marginHorizontal: 16,
    borderWidth: 1,
    borderColor: '#404040',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  title: {
    fontSize: 18,
    fontWeight: '500',
    color: '#E5E5E5',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 14,
    color: '#9CA3AF',
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 8,
  },
  button: {
    backgroundColor: '#262626',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 6,
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonText: {
    color: '#E5E5E5',
    fontSize: 14,
    fontWeight: '500',
  },
  labelsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  label: {
    backgroundColor: '#262626',
    borderRadius: 12,
    paddingVertical: 4,
    paddingHorizontal: 8,
    marginRight: 8,
    marginBottom: 8,
  },
  labelText: {
    fontSize: 12,
    color: '#D1D5DB',
  },
  description: {
    fontSize: 14,
    color: '#9CA3AF',
    marginBottom: 12,
  },
  notesContainer: {
    marginTop: 12,
  },
  notesLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#D1D5DB',
    marginBottom: 4,
  },
  notesInput: {
    backgroundColor: '#0A0A0A',
    borderWidth: 1,
    borderColor: '#404040',
    borderRadius: 6,
    padding: 8,
    fontSize: 14,
    minHeight: 80,
    color: '#E5E5E5',
  },
  details: {
    fontSize: 14,
    color: '#9CA3AF',
    marginTop: 8,
  },
  weightContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 8,
  },
  heavyWarning: {
    fontSize: 14,
    color: '#F59E0B',
    fontWeight: '500',
    marginLeft: 8,
  },
  error: {
    color: '#EF4444',
    fontSize: 14,
    marginTop: 12,
  },
}); 