import React, { useState } from 'react';
import { PackingContainer } from '../../shared/services/inventory/packListService';
import { PrintLabelButton } from '../../shared/components/PropCard/PrintLabelButton';
import { PackingBoxCardBaseProps, PackingBoxState, generateContainerUrl, calculateIsHeavy } from '../../shared/types/packing';

export const PackingBoxCard: React.FC<PackingBoxCardBaseProps> = ({
  container,
  packListId,
  onUpdateNotes,
  onError,
  baseUrl,
  onPrintLabel,
  onShare,
  onScan
}) => {
  const [state, setState] = useState<PackingBoxState>({
    isLoading: false,
    error: null,
    isSyncing: false
  });

  const handleNotesChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    onUpdateNotes?.(event.target.value);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Box: ${container.name}`,
          text: `View details for box ${container.name}`,
          url: generateContainerUrl(baseUrl, packListId, container.id)
        });
        onShare?.();
      } catch (error) {
        console.error('Error sharing:', error);
        onError?.('Failed to share box details');
      }
    }
  };

  const handleScan = () => {
    onScan?.();
  };

  const label = {
    id: `${packListId}-${container.id}`,
    containerId: container.id,
    packListId,
    qrCode: '', // This will be generated by the service
    containerName: container.name,
    containerStatus: container.status,
    propCount: container.props.length,
    labels: container.labels,
    url: generateContainerUrl(baseUrl, packListId, container.id),
    generatedAt: new Date()
  };

  const isHeavy = calculateIsHeavy(container);

  return (
    <div className="bg-[#1A1A1A] border border-gray-700 rounded-lg p-4">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-lg font-medium text-gray-200">{container.name}</h3>
          <p className="text-sm text-gray-400">Status: {container.status}</p>
          <p className="text-sm text-gray-400">Props: {container.props.length}</p>
        </div>
        <div className="flex gap-2">
          <PrintLabelButton
            label={label}
            onError={onError}
            className="bg-gray-800 hover:bg-gray-700 text-gray-200"
          />
          <button
            onClick={handleShare}
            className="bg-gray-800 hover:bg-gray-700 text-gray-200 px-4 py-2 rounded"
            title="Share box details"
          >
            Share
          </button>
          <button
            onClick={handleScan}
            className="bg-gray-800 hover:bg-gray-700 text-gray-200 px-4 py-2 rounded"
            title="Scan QR code"
          >
            Scan
          </button>
        </div>
      </div>

      {container.labels.length > 0 && (
        <div className="mb-4">
          <div className="flex flex-wrap gap-2">
            {container.labels.map((label) => (
              <span
                key={label}
                className="bg-gray-800 px-2 py-1 rounded-full text-sm text-gray-300"
              >
                {label}
              </span>
            ))}
          </div>
        </div>
      )}

      {container.description && (
        <p className="text-sm text-gray-400 mb-4">{container.description}</p>
      )}

      <div className="mt-4">
        <label htmlFor="notes" className="block text-sm font-medium text-gray-300 mb-1">
          Notes
        </label>
        <textarea
          id="notes"
          className="w-full px-3 py-2 bg-[#0A0A0A] border border-gray-700 rounded-lg text-sm text-gray-200 placeholder-gray-500"
          rows={3}
          value={container.description || ''}
          onChange={handleNotesChange}
          placeholder="Add notes about this box..."
        />
      </div>

      {container.dimensions && (
        <div className="mt-4 text-sm text-gray-400">
          <p>
            Dimensions: {container.dimensions.width} x {container.dimensions.height} x{' '}
            {container.dimensions.depth} {container.dimensions.unit}
          </p>
        </div>
      )}

      {container.maxWeight && (
        <div className="mt-2 text-sm text-gray-400">
          <p>
            Max Weight: {container.maxWeight.value} {container.maxWeight.unit}
          </p>
        </div>
      )}

      {container.currentWeight && (
        <div className="mt-2 text-sm text-gray-400">
          <p>
            Current Weight: {container.currentWeight.value} {container.currentWeight.unit}
            {isHeavy && (
              <span className="text-yellow-500 ml-2 font-medium">(Heavy)</span>
            )}
          </p>
        </div>
      )}

      {state.error && (
        <div className="mt-4 text-red-500 text-sm">{state.error}</div>
      )}
    </div>
  );
}; 