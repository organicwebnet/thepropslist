rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- Legacy rules (commented out for shows, tasks, props) ---
    /*
    // match /tasks/{taskId} {
    //   allow read, write: if request.auth != null && (
    //     request.auth.uid == resource.data.ownerId ||
    //     request.auth.uid == resource.data.assignedTo
    //   );
    // }
    // match /shows/{showId} {
    //   allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    // }
    // match /props/{propId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    // }
    */
    // --- End legacy rules ---

    match /tasks/{taskId}/comments/{commentId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }
    match /shows/{showId}/notes/{noteId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }
    match /userProfiles/{userId} {
      allow read: if isSystemAdmin() || (request.auth != null); // Allow any authenticated user to read profiles for display names
      allow write: if isSystemAdmin() || (request.auth != null && request.auth.uid == userId); // Only allow writing to own profile
    }
    match /users/{userId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == userId);
    }
    match /packingBoxes/{boxId} {
      // Create uses request.resource; others use resource
      allow create: if request.auth != null && (
        isSystemAdmin() || (
          exists(/databases/$(database)/documents/shows/$(request.resource.data.showId)) && (
            get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.ownerId == request.auth.uid ||
            get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.team[request.auth.uid] != null
          )
        )
      );

      allow read, update, delete: if request.auth != null && (
        isSystemAdmin() || (
          exists(/databases/$(database)/documents/shows/$(resource.data.showId)) && (
            get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid ||
            get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null
          )
        )
      );
    }
    match /packLists/{packListId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        isTeamMember(resource.data.showId)
      );
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    match /packs/{packId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }
    match /locations/{locationId} {
      allow read, write: if isSystemAdmin() || (request.auth != null &&
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid);
    }
    match /labels/{labelId} {
      allow read, write: if isSystemAdmin() || (request.auth != null &&
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid);
    }
    match /todo_boards/{boardId} {
      allow read, write: if request.auth != null;
    }
    match /todo_boards/{boardId}/lists/{listId} {
      allow read, write: if request.auth != null;
    }
    match /todo_boards/{boardId}/lists/{listId}/cards/{cardId} {
      allow read, write: if request.auth != null;
    }
    match /todo_boards/{boardId}/members/{memberId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && isBoardMember(boardId));
    }
    match /propsTab/{docId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }
    match /props_native/{docId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }
    match /props_shared_details/{docId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }
    match /shows/{showId} {
      allow read: if isSystemAdmin() || (request.auth != null);
      allow update, delete: if isSystemAdmin() || (request.auth != null && (
        resource.data.team[request.auth.uid] == "god" ||
        resource.data.team[request.auth.uid] == "props_supervisor"
      ));
      allow create: if isSystemAdmin() || request.auth != null;

      // Team subcollection (if you use it)
      match /team/{teamMemberId} {
        allow read: if isSystemAdmin() || (request.auth != null && get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] != null);
        allow write: if isSystemAdmin() || (request.auth != null && (
          get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == "god" ||
          get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == "props_supervisor"
        ));
      }
    }
    match /invitations/{inviteId} {
      function isShowOwner(showId) {
        return get(/databases/$(database)/documents/shows/$(showId)).data.userId == request.auth.uid ||
               get(/databases/$(database)/documents/shows/$(showId)).data.ownerId == request.auth.uid;
      }

      allow create: if isSystemAdmin() || (request.auth != null && (
        isShowOwner(request.resource.data.showId) ||
        hasTeamRole(request.resource.data.showId, 'god') ||
        hasTeamRole(request.resource.data.showId, 'props_supervisor')
      ));

      allow read, update, delete: if isSystemAdmin() || (request.auth != null && (
        isShowOwner(resource.data.showId) ||
        hasTeamRole(resource.data.showId, 'god') ||
        hasTeamRole(resource.data.showId, 'props_supervisor') ||
        (request.auth.token.email == resource.data.email && resource.data.status == "pending")
      ));
    }
    // Allow enqueuing emails for MailerSend/Trigger Email extensions
    match /emails/{emailId} {
      allow create: if request.auth != null;  // enqueue for MailerSend extension
      allow read, update, delete: if false;
    }
    match /tasks/{taskId} {
      allow read, write: if isSystemAdmin() || (request.auth != null && (
          get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null ||
          resource.data.createdBy == request.auth.uid ||
          request.auth.uid in resource.data.assignedTo
      ));
      allow update, delete: if isSystemAdmin() || (request.auth != null && (
        resource.data.assignedTo == request.auth.uid ||
        resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] == "god" ||
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] == "props_supervisor"
      ));
    }
    match /props/{propId} {
      allow read, write: if isSystemAdmin() ||
        (request.auth != null &&
          (
            isTeamMember(resource.data.showId) ||
            get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == "god"
          )
        );

      allow update, delete: if isSystemAdmin() ||
        (request.auth != null &&
          (
            hasTeamRole(resource.data.showId, 'god') ||
            hasTeamRole(resource.data.showId, 'props_supervisor') ||
            get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == "god"
          )
        );
    }

    match /shopping_items/{shoppingId} {
      allow read: if isSystemAdmin() || (request.auth != null);
      allow create: if isSystemAdmin() || (request.auth != null && request.auth.token.email == request.resource.data.requestedBy);
      allow update: if isSystemAdmin() || (request.auth != null); // Allow any authenticated user to add options
      allow delete: if isSystemAdmin() || (request.auth != null && request.auth.token.email == resource.data.requestedBy);
    }

    // --- Collaborative Team & Role-Based Access Rules (ACTIVE) ---
    // These rules assume each show document has a 'team' map: { [userId]: role }
    // Remove or comment out any function definitions and .where() usage (not supported in Firestore rules)

    function isBoardMember(boardId) {
      return get(/databases/$(database)/documents/todo_boards/$(boardId)).data.ownerId == request.auth.uid || 
             request.auth.uid in get(/databases/$(database)/documents/todo_boards/$(boardId)).data.sharedWith;
    }

    // Check for system-admin role without using unsupported map.get()
    function isSystemAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.groups != null) &&
        (get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.groups['system-admin'] == true);
    }

    // Function to check if a user is a member of the show's team
    function isTeamMember(showId) {
      // A user is a team member if their UID exists as a key in the show's 'team' map.
      return get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] != null;
    }

    // Function to check if a user has a specific role in the show's team
    function hasTeamRole(showId, role) {
      return get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == role;
    }

    // Function to check if a user is an owner of a document
    function isOwner(docId, collectionName) {
      // Checks if the requesting user's UID matches the 'ownerId' field of the specified document.
      return get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.ownerId == request.auth.uid;
    }

    // Function to check user role from their profile
    function getUserRole() {
      return request.auth != null && exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid))
        ? get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role
        : null;
    }

    // THIS RULE MUST BE LAST to act as a catch-all deny.
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 