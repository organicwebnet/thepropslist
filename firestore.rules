rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== PERMISSION FUNCTIONS =====
    
    // Check if user is a god user (highest level access)
    function isGod() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == "god";
    }

    // Check for system-admin role (legacy admin system)
    function isSystemAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.groups != null) &&
        (get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.groups['system-admin'] == true);
    }

    // Check if user has admin privileges (god, system-admin, or admin role)
    function isAdmin() {
      return isGod() || isSystemAdmin() || (
        request.auth != null &&
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role in ["admin", "props_supervisor"]
      );
    }

    // Function to check if a user is a member of the show's team
    function isTeamMember(showId) {
      return isGod() || get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] != null;
    }

    // Function to check if a user has a specific role in the show's team
    function hasTeamRole(showId, role) {
      return isGod() || get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == role;
    }

    // Check if user is a board member
    function isBoardMember(boardId) {
      return isGod() || (exists(/databases/$(database)/documents/todo_boards/$(boardId)) && (
        get(/databases/$(database)/documents/todo_boards/$(boardId)).data.ownerId == request.auth.uid || 
        request.auth.uid in get(/databases/$(database)/documents/todo_boards/$(boardId)).data.sharedWith
      ));
    }

    // ===== COLLECTION RULES =====

    // Tasks and comments
    match /tasks/{taskId}/comments/{commentId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }

    // Notifications: user may read own notifications; writes by self or admin
    match /notifications/{notificationId} {
      allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create: if isAdmin() || (request.auth != null && request.resource.data.userId == request.auth.uid);
      allow update, delete: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
    }

    // Show notes
    match /shows/{showId}/notes/{noteId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }

    // User profiles - god users can read all, others can only read their own
    match /userProfiles/{userId} {
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      allow write: if isAdmin() || (request.auth != null && request.auth.uid == userId);
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == userId);
    }

    // Packing boxes
    match /packingBoxes/{boxId} {
      allow create: if isAdmin() || (request.auth != null && (
        exists(/databases/$(database)/documents/shows/$(request.resource.data.showId)) && (
          get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.ownerId == request.auth.uid ||
          get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.team[request.auth.uid] != null
        )
      ));

      allow read: if isAdmin() || (resource.data.publicReadable == true || (
        request.auth != null && (
          exists(/databases/$(database)/documents/shows/$(resource.data.showId)) && (
            get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid ||
            get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null
          )
        )
      ));

      allow update, delete: if isAdmin() || (request.auth != null && (
        exists(/databases/$(database)/documents/shows/$(resource.data.showId)) && (
          get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid ||
          get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null
        )
      ));
    }

    // Pack lists
    match /packLists/{packListId} {
      allow create: if isAdmin() || (request.auth != null && request.auth.uid == request.resource.data.ownerId);
      allow read: if isAdmin() || (request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        isTeamMember(resource.data.showId)
      ));
      allow update, delete: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }

    // Packs
    match /packs/{packId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.ownerId);
    }

    // Locations
    match /locations/{locationId} {
      allow read, write: if isAdmin() || (request.auth != null &&
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid);
    }

    // Labels
    match /labels/{labelId} {
      allow read, write: if isAdmin() || (request.auth != null &&
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid);
    }

    // TODO BOARDS - Simplified rules, validation handled by Cloud Functions
    match /todo_boards/{boardId} {
      allow read, update, delete: if isAdmin() || (
        request.auth != null &&
        resource.data.sharedWith != null &&
        request.auth.uid in resource.data.sharedWith
      );
      
      // Create allowed for authenticated users - limit checking done by Cloud Function
      allow create: if request.auth != null &&
        request.resource.data.ownerId == request.auth.uid &&
        request.resource.data.sharedWith != null &&
        request.auth.uid in request.resource.data.sharedWith;
    }

    // Board lists
    match /todo_boards/{boardId}/lists/{listId} {
      allow read, write: if isAdmin() || (request.auth != null && isBoardMember(boardId));
    }

    // Board cards
    match /todo_boards/{boardId}/lists/{listId}/cards/{cardId} {
      allow read: if isAdmin() || (request.auth != null && isBoardMember(boardId));
      allow update, delete: if isAdmin() || (request.auth != null && isBoardMember(boardId));
      allow create: if isAdmin() || (request.auth != null && isBoardMember(boardId));
    }

    // Board members
    match /todo_boards/{boardId}/members/{memberId} {
      allow read, write: if isAdmin() || (request.auth != null && isBoardMember(boardId));
    }

    // Props tabs
    match /propsTab/{docId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }

    // Native props
    match /props_native/{docId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }

    // Shared props details
    match /props_shared_details/{docId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }

    // SHOWS - Simplified rules, validation handled by Cloud Functions
    match /shows/{showId} {
      allow read: if isAdmin() || (request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.createdBy == request.auth.uid ||
        resource.data.team[request.auth.uid] != null
      ));
      
      allow update, delete: if isAdmin() || (request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.createdBy == request.auth.uid ||
        resource.data.team[request.auth.uid] == "god" ||
        resource.data.team[request.auth.uid] == "props_supervisor"
      ));
      
      // Create allowed for authenticated users - limit checking done by Cloud Function
      allow create: if request.auth != null;

      // Team subcollection
      match /team/{teamMemberId} {
        allow read: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] != null);
        allow write: if isAdmin() || (request.auth != null && (
          get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == "god" ||
          get(/databases/$(database)/documents/shows/$(showId)).data.team[request.auth.uid] == "props_supervisor"
        ));
      }
    }
    
    // Deletion logs
    match /deletion_logs/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false; // Logs should not be modified after creation
    }

    // Invitations - Simplified rules, validation handled by Cloud Functions
    match /invitations/{inviteId} {
      function isShowOwner(showId) {
        return get(/databases/$(database)/documents/shows/$(showId)).data.userId == request.auth.uid ||
               get(/databases/$(database)/documents/shows/$(showId)).data.ownerId == request.auth.uid;
      }

      // Create invite allowed for show owners and team members - limit checking done by Cloud Function
      allow create: if isAdmin() || (request.auth != null && (
        isShowOwner(request.resource.data.showId) ||
        hasTeamRole(request.resource.data.showId, 'god') ||
        hasTeamRole(request.resource.data.showId, 'props_supervisor') ||
        hasTeamRole(request.resource.data.showId, 'art_director')
      ));

      // Allow public read of pending invites so invite links open without auth
      allow read: if (resource.data.status == "pending" || resource.data.status == null) || isAdmin() || (request.auth != null && (
        isShowOwner(resource.data.showId) ||
        hasTeamRole(resource.data.showId, 'god') ||
        hasTeamRole(resource.data.showId, 'props_supervisor') ||
        (request.auth.token.email == resource.data.email)
      ));

      allow update, delete: if isAdmin() || (request.auth != null && (
        isShowOwner(resource.data.showId) ||
        hasTeamRole(resource.data.showId, 'god') ||
        hasTeamRole(resource.data.showId, 'props_supervisor')
      ));
    }

    // Private prop costings
    match /shows/{showId}/props_private/{propId} {
      allow read, write: if isAdmin() || (request.auth != null && (
        get(/databases/$(database)/documents/shows/$(showId)).data.ownerId == request.auth.uid ||
        hasTeamRole(showId, 'god') ||
        hasTeamRole(showId, 'props_supervisor') ||
        hasTeamRole(showId, 'art_director')
      ));
    }

    // Change/Purchase/Maintenance requests
    match /requests/{requestId} {
      allow read: if isAdmin() || (request.auth != null && (
        (get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null)
      ));

      // Create by editor+ (god, props_supervisor, editor)
      allow create: if isAdmin() || (request.auth != null && (
        hasTeamRole(request.resource.data.showId, 'god') ||
        hasTeamRole(request.resource.data.showId, 'props_supervisor') ||
        hasTeamRole(request.resource.data.showId, 'editor')
      ));

      // Update/approve/reject by props_supervisor+ (includes art_director)
      allow update, delete: if isAdmin() || (request.auth != null && (
        hasTeamRole(resource.data.showId, 'god') ||
        hasTeamRole(resource.data.showId, 'props_supervisor') ||
        hasTeamRole(resource.data.showId, 'art_director')
      ));
    }

    // Private cost breakdown for requests
    match /requests_private/{requestId} {
      allow read, write: if isAdmin() || (request.auth != null && (
        hasTeamRole(get(/databases/$(database)/documents/requests/$(requestId)).data.showId, 'god') ||
        hasTeamRole(get(/databases/$(database)/documents/requests/$(requestId)).data.showId, 'props_supervisor') ||
        hasTeamRole(get(/databases/$(database)/documents/requests/$(requestId)).data.showId, 'art_director')
      ));
    }

    // Feedback collection
    match /feedback/{id} {
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }

    // Email collections
    match /emails/{emailId} {
      allow create: if true;  // Allow anyone to create emails (for signup verification)
      allow read, update, delete: if false;
    }
    
    match /emails/{document=**} {
      allow create: if true;
      allow read, update, delete: if false;
    }
    
    // Verification codes
    match /pending_signups/{email} {
      allow create: if true;
      allow read, update: if true;
      allow delete: if true;
    }
    
    match /pending_password_resets/{email} {
      allow create: if true;
      allow read, update: if true;
      allow delete: if true;
    }

    // TASKS - Fixed for god user access
    match /tasks/{taskId} {
      allow read, write: if isAdmin() || (request.auth != null && (
          get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null ||
          resource.data.createdBy == request.auth.uid ||
          request.auth.uid in resource.data.assignedTo
      ));
      allow update, delete: if isAdmin() || (request.auth != null && (
        resource.data.assignedTo == request.auth.uid ||
        resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] == "god" ||
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] == "props_supervisor"
      ));
    }

    // PROPS - Simplified rules, validation handled by Cloud Functions
    match /props/{propId} {
      allow read: if isAdmin() || (request.auth != null && (
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.ownerId == request.auth.uid ||
        get(/databases/$(database)/documents/shows/$(resource.data.showId)).data.team[request.auth.uid] != null
      ));
      
      // Create allowed for authenticated users - limit checking done by Cloud Function
      allow create: if request.auth != null && (
        get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.ownerId == request.auth.uid ||
        get(/databases/$(database)/documents/shows/$(request.resource.data.showId)).data.team[request.auth.uid] != null
      );
      
      // Update/delete permissions require proper team membership or admin role
      allow update, delete: if isAdmin() ||
        (request.auth != null &&
          (
            hasTeamRole(resource.data.showId, 'god') ||
            hasTeamRole(resource.data.showId, 'props_supervisor')
          )
        );
    }

    // Shopping items
    match /shopping_items/{shoppingId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null && request.auth.token.email == request.resource.data.requestedBy);
      allow update: if isAdmin() || (request.auth != null);
      allow delete: if isAdmin() || (request.auth != null && request.auth.token.email == resource.data.requestedBy);
    }

    // Makers collection
    match /makers/{makerId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null);
      allow update, delete: if isAdmin();
    }

    // Hire companies collection
    match /hire_companies/{companyId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null);
      allow update, delete: if isAdmin();
    }

    // Acts collection
    match /acts/{actId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null);
      allow update, delete: if isAdmin();
    }

    // Scenes collection
    match /scenes/{sceneId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null);
      allow update, delete: if isAdmin();
    }

    // Addresses collection
    match /addresses/{addressId} {
      allow read: if isAdmin() || (request.auth != null);
      allow create: if isAdmin() || (request.auth != null);
      allow update, delete: if isAdmin() || (request.auth != null);
    }

    // THIS RULE MUST BE LAST to act as a catch-all deny.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}